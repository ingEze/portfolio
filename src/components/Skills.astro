---
import { translations } from '../i18n/translations'

const skills = [
    { name: 'Javascript/TypeScript', category: 'language', icon: 'üìò' },
    { name: 'Python', category: 'language', icon: 'üêç' },
    { name: 'Node.js', category: 'backend', icon: 'üü¢' },
    { name: 'Express', category: 'backend', icon: 'üöÇ' },
    { name: 'MongoDB', category: 'database', icon: 'üçÉ' },
    { name: 'MySQL', category: 'database', icon: 'üê¨' },
    { name: 'SQLite', category: 'database', icon: 'üóÑÔ∏è' },
    { name: 'Docker', category: 'devops', icon: 'üê≥' },
    { name: 'CI/CD', category: 'devops', icon: 'üîÑ' },
    { name: 'REST APIs', category: 'backend', icon: 'üîå' },
    { name: 'Vitest', category: 'testing', icon: 'üß™' },
    { name: 'Jest', category: 'testing', icon: '‚ö°' },
    { name: 'Astro', category: 'frontend', icon: 'üöÄ' },
    { name: 'HTML/CSS', category: 'frontend', icon: 'üìÑ/üé®' }
]
---

<section class="section" id="stack">
    <h2 class="section-title" data-i18n="skills.title">{translations.es.skills.title}</h2>
    
    <div class="skills-container">
        {Object.keys(translations.es.skills.categories).map((key) => {
            const categorySkills = skills.filter(skill => skill.category === key);
            if (categorySkills.length === 0) return null;
            
            return (
                <div class="category-group">
                    <h3 class="category-title" data-i18n={`skills.categories.${key}`}>
                        {translations.es.skills.categories[key as keyof typeof translations.es.skills.categories]}
                    </h3>
                    <div class="skills-grid">
                        {categorySkills.map((skill) => (
                            <div class="skill-card">
                                <span class="skill-icon">{skill.icon}</span>
                                <span class="skill-name">{skill.name}</span>
                            </div>
                        ))}
                    </div>
                </div>
            )
        })}
    </div>
</section>

<style>
    .skills-container {
        display: flex;
        flex-direction: column;
        gap: 2.5rem;
        margin-top: 2rem;
    }

    .category-group {
        animation: fadeInUp 0.6s ease-out forwards;
        opacity: 0;
    }

    .category-group:nth-child(1) { animation-delay: 0.1s; }
    .category-group:nth-child(2) { animation-delay: 0.2s; }
    .category-group:nth-child(3) { animation-delay: 0.3s; }
    .category-group:nth-child(4) { animation-delay: 0.4s; }
    .category-group:nth-child(5) { animation-delay: 0.5s; }
    .category-group:nth-child(6) { animation-delay: 0.6s; }

    .category-title {
        font-size: 1.1rem;
        color: var(--accent);
        margin-bottom: 1rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        position: relative;
        display: inline-block;
    }

    .category-title::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 0;
        width: 40px;
        height: 2px;
        background: var(--accent);
        transition: width 0.3s ease;
    }

    .category-group:hover .category-title::after {
        width: 100%;
    }

    .skills-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    .skill-card {
        padding: 1.2rem;
        background: rgba(0, 255, 136, 0.05);
        border: 1px solid rgba(0, 255, 136, 0.2);
        border-radius: 8px;
        text-align: center;
        transition: all 0.3s ease;
        cursor: default;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        overflow: hidden;
    }

    .skill-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 136, 0.1), transparent);
        transition: left 0.5s ease;
    }

    .skill-card:hover::before {
        left: 100%;
    }

    .skill-card:hover {
        background: rgba(0, 255, 136, 0.1);
        border-color: var(--accent);
        transform: translateY(-5px) scale(1.05);
        box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
    }

    .skill-icon {
        font-size: 2rem;
        transition: transform 0.3s ease;
        filter: grayscale(0.3);
    }

    .skill-card:hover .skill-icon {
        transform: scale(1.2) rotate(5deg);
        filter: grayscale(0);
    }

    .skill-name {
        font-size: 0.95rem;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.9);
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @media (max-width: 768px) {
        .skills-grid {
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 0.8rem;
        }

        .skill-card {
            padding: 1rem;
        }

        .skill-icon {
            font-size: 1.5rem;
        }

        .skill-name {
            font-size: 0.85rem;
        }

        .category-title {
            font-size: 1rem;
        }
    }
</style>

<script>
    import { translations, type Language } from '../i18n/translations'

    function updateTranslations(lang: Language) {
        const elements = document.querySelectorAll('[data-i18n]')
        
        elements.forEach((element) => {
            const key = element.getAttribute('data-i18n')
            if (!key) return

            const keys = key.split('.')
            let value: any = translations[lang]

            for (const k of keys) {
                value = value?.[k]
            }

            if (value && typeof value === 'string') {
                element.textContent = value
            }
        })
    }

    window.addEventListener('languageChange', (e: Event) => {
        const customEvent = e as CustomEvent<{ lang: Language }>
        updateTranslations(customEvent.detail.lang)
    });

    const currentLang = (localStorage.getItem('language') || 'es') as Language
    updateTranslations(currentLang)
</script>